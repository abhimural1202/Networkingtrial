trigger:
  branches:
    include:
      - main  # Trigger the pipeline when a change is pushed to the "main" branch

pool:
  vmImage: 'ubuntu-latest'  # Use Ubuntu environment for the pipeline

steps:
# Step 1: Checkout the repository
- task: Checkout@1
  displayName: 'Checkout code from GitHub'

# Step 2: Terraform - Initialize, Plan, and Apply Infrastructure
- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.3.0'  # Specify the required Terraform version

- script: |
    terraform init
    terraform plan -out=tfplan
    terraform apply -auto-approve tfplan
  workingDirectory: $(Build.SourcesDirectory)/terraform
  displayName: 'Terraform: Provision Infrastructure'

# Step 3: Ansible - Configure the Server (Install Docker, etc.)
- script: |
    sudo apt-get update
    sudo apt-get install -y ansible
    ansible-playbook -i $(Build.SourcesDirectory)/ansible/hosts.ini $(Build.SourcesDirectory)/ansible/docker-setup.yml
  displayName: 'Ansible: Configure the Server'

# Step 4: Build and Push Docker Image to Container Registry
- task: Docker@2
  inputs:
    containerRegistry: 'DockerHubConnection'  # Docker registry connection in Azure DevOps
    repository: 'my-repository'               # Docker repository
    command: 'buildAndPush'                   # Build and push the Docker image
    Dockerfile: '$(Build.SourcesDirectory)/docker/Dockerfile'  # Location of Dockerfile
    tags: |
      $(Build.BuildId)  # Tag Docker image with Build ID
  displayName: 'Build and Push Docker Image'

# Step 5: Deploy Docker Container to Azure VM
- task: AzureCLI@2
  inputs:
    azureSubscription: 'MyAzureSubscription'  # Azure subscription for the deployment
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Deploying Docker container to Azure VM"
      docker pull my-dockerhub-username/my-repository:$(Build.BuildId)
      docker run -d -p 80:80 my-dockerhub-username/my-repository:$(Build.BuildId)
    displayName: 'Deploy Docker Container to Azure VM'

